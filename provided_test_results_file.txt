
=== Lexing and parsing a3-valid-clif1.txt ===

Lexing ('FuncA' 'a' 100 25)
LexToken(OPEN,'(',1,0)
LexToken(QUOTEDSTRING,"'FuncA'",1,1)
LexToken(QUOTEDSTRING,"'a'",1,9)
LexToken(NUMERAL,'100',1,13)
LexToken(NUMERAL,'25',1,17)
LexToken(CLOSE,')',1,19)

Parsing ('FuncA' 'a' 100 25)
ParsedElement(TYPE: quotedstring, VALUE: 'FuncA')
ParsedElement(TYPE: predicate, VALUE: 'FuncA')
ParsedElement(TYPE: quotedstring, VALUE: 'a')
ParsedElement(TYPE: numeral, VALUE: 100)
ParsedElement(TYPE: numeral, VALUE: 25)
ParsedElement(TYPE: termseq, VALUE: 25)
ParsedElement(TYPE: termseq, VALUE: 100 25)
ParsedElement(TYPE: termseq, VALUE: 'a' 100 25)
ParsedElement(TYPE: atomsent, VALUE: ('FuncA' 'a' 100 25))
ParsedElement(TYPE: sentence, VALUE: ('FuncA' 'a' 100 25))

Lexing (and ('B' 'C') (or ('C' 'D')) (or ('FuncB') ('Func' 100 'A') ('something')))
LexToken(OPEN,'(',1,0)
LexToken(AND,'and',1,1)
LexToken(OPEN,'(',1,5)
LexToken(QUOTEDSTRING,"'B'",1,6)
LexToken(QUOTEDSTRING,"'C'",1,10)
LexToken(CLOSE,')',1,13)
LexToken(OPEN,'(',1,15)
LexToken(OR,'or',1,16)
LexToken(OPEN,'(',1,19)
LexToken(QUOTEDSTRING,"'C'",1,20)
LexToken(QUOTEDSTRING,"'D'",1,24)
LexToken(CLOSE,')',1,27)
LexToken(CLOSE,')',1,28)
LexToken(OPEN,'(',1,30)
LexToken(OR,'or',1,31)
LexToken(OPEN,'(',1,34)
LexToken(QUOTEDSTRING,"'FuncB'",1,35)
LexToken(CLOSE,')',1,42)
LexToken(OPEN,'(',1,44)
LexToken(QUOTEDSTRING,"'Func'",1,45)
LexToken(NUMERAL,'100',1,52)
LexToken(QUOTEDSTRING,"'A'",1,56)
LexToken(CLOSE,')',1,59)
LexToken(OPEN,'(',1,61)
LexToken(QUOTEDSTRING,"'something'",1,62)
LexToken(CLOSE,')',1,73)
LexToken(CLOSE,')',1,74)
LexToken(CLOSE,')',1,75)

Parsing (and ('B' 'C') (or ('C' 'D')) (or ('FuncB') ('Func' 100 'A') ('something')))
ParsedElement(TYPE: quotedstring, VALUE: 'B')
ParsedElement(TYPE: predicate, VALUE: 'B')
ParsedElement(TYPE: quotedstring, VALUE: 'C')
ParsedElement(TYPE: termseq, VALUE: 'C')
ParsedElement(TYPE: atomsent, VALUE: ('B' 'C'))
ParsedElement(TYPE: sentence, VALUE: ('B' 'C'))
ParsedElement(TYPE: quotedstring, VALUE: 'C')
ParsedElement(TYPE: predicate, VALUE: 'C')
ParsedElement(TYPE: quotedstring, VALUE: 'D')
ParsedElement(TYPE: termseq, VALUE: 'D')
ParsedElement(TYPE: atomsent, VALUE: ('C' 'D'))
ParsedElement(TYPE: sentence, VALUE: ('C' 'D'))
ParsedElement(TYPE: sentence, VALUE: ('C' 'D'))
ParsedElement(TYPE: boolsent, VALUE: (OR ('C' 'D')))
ParsedElement(TYPE: sentence, VALUE: (OR ('C' 'D')))
ParsedElement(TYPE: quotedstring, VALUE: 'FuncB')
ParsedElement(TYPE: predicate, VALUE: 'FuncB')
ParsedElement(TYPE: termseq, VALUE: None)
ParsedElement(TYPE: atomsent, VALUE: ('FuncB'))
ParsedElement(TYPE: sentence, VALUE: ('FuncB'))
ParsedElement(TYPE: quotedstring, VALUE: 'Func')
ParsedElement(TYPE: predicate, VALUE: 'Func')
ParsedElement(TYPE: numeral, VALUE: 100)
ParsedElement(TYPE: quotedstring, VALUE: 'A')
ParsedElement(TYPE: termseq, VALUE: 'A')
ParsedElement(TYPE: termseq, VALUE: 100 'A')
ParsedElement(TYPE: atomsent, VALUE: ('Func' 100 'A'))
ParsedElement(TYPE: sentence, VALUE: ('Func' 100 'A'))
ParsedElement(TYPE: quotedstring, VALUE: 'something')
ParsedElement(TYPE: predicate, VALUE: 'something')
ParsedElement(TYPE: termseq, VALUE: None)
ParsedElement(TYPE: atomsent, VALUE: ('something'))
ParsedElement(TYPE: sentence, VALUE: ('something'))
ParsedElement(TYPE: sentence, VALUE: ('something'))
ParsedElement(TYPE: sentence, VALUE: ('Func' 100 'A') ('something'))
ParsedElement(TYPE: sentence, VALUE: ('FuncB') ('Func' 100 'A') ('something'))
ParsedElement(TYPE: boolsent, VALUE: (OR ('FuncB') ('Func' 100 'A') ('something')))
ParsedElement(TYPE: sentence, VALUE: (OR ('FuncB') ('Func' 100 'A') ('something')))
ParsedElement(TYPE: sentence, VALUE: (OR ('FuncB') ('Func' 100 'A') ('something')))
ParsedElement(TYPE: sentence, VALUE: (OR ('C' 'D')) (OR ('FuncB') ('Func' 100 'A') ('something')))
ParsedElement(TYPE: sentence, VALUE: ('B' 'C') (OR ('C' 'D')) (OR ('FuncB') ('Func' 100 'A') ('something')))
ParsedElement(TYPE: boolsent, VALUE: (AND ('B' 'C') (OR ('C' 'D')) (OR ('FuncB') ('Func' 100 'A') ('something'))))
ParsedElement(TYPE: sentence, VALUE: (AND ('B' 'C') (OR ('C' 'D')) (OR ('FuncB') ('Func' 100 'A') ('something'))))

Lexing ('cl:comment' 'B100%')
LexToken(OPEN,'(',1,0)
LexToken(QUOTEDSTRING,"'cl:comment'",1,1)
LexToken(QUOTEDSTRING,"'B100%'",1,14)
LexToken(CLOSE,')',1,21)

Parsing ('cl:comment' 'B100%')
ParsedElement(TYPE: quotedstring, VALUE: 'cl:comment')
ParsedElement(TYPE: predicate, VALUE: 'cl:comment')
ParsedElement(TYPE: quotedstring, VALUE: 'B100%')
ParsedElement(TYPE: termseq, VALUE: 'B100%')
ParsedElement(TYPE: atomsent, VALUE: ('cl:comment' 'B100%'))
ParsedElement(TYPE: sentence, VALUE: ('cl:comment' 'B100%'))

Lexing ('A1:"A_comment_inside"' 'COMMENT:B100%')
LexToken(OPEN,'(',1,0)
LexToken(QUOTEDSTRING,'\'A1:"A_comment_inside"\'',1,1)
LexToken(QUOTEDSTRING,"'COMMENT:B100%'",1,25)
LexToken(CLOSE,')',1,40)

Parsing ('A1:"A_comment_inside"' 'COMMENT:B100%')
ParsedElement(TYPE: quotedstring, VALUE: 'A1:"A_comment_inside"')
ParsedElement(TYPE: predicate, VALUE: 'A1:"A_comment_inside"')
ParsedElement(TYPE: quotedstring, VALUE: 'COMMENT:B100%')
ParsedElement(TYPE: termseq, VALUE: 'COMMENT:B100%')
ParsedElement(TYPE: atomsent, VALUE: ('A1:"A_comment_inside"' 'COMMENT:B100%'))
ParsedElement(TYPE: sentence, VALUE: ('A1:"A_comment_inside"' 'COMMENT:B100%'))

Lexing (iff (and ('B_100' 'B_101' '$100')) ('[TODAY]' '[4,5,6]' '[3+4]'))
LexToken(OPEN,'(',1,0)
LexToken(IFF,'iff',1,1)
LexToken(OPEN,'(',1,5)
LexToken(AND,'and',1,6)
LexToken(OPEN,'(',1,10)
LexToken(QUOTEDSTRING,"'B_100'",1,11)
LexToken(QUOTEDSTRING,"'B_101'",1,19)
LexToken(QUOTEDSTRING,"'$100'",1,27)
LexToken(CLOSE,')',1,33)
LexToken(CLOSE,')',1,34)
LexToken(OPEN,'(',1,36)
LexToken(QUOTEDSTRING,"'[TODAY]'",1,37)
LexToken(QUOTEDSTRING,"'[4,5,6]'",1,47)
LexToken(QUOTEDSTRING,"'[3+4]'",1,57)
LexToken(CLOSE,')',1,64)
LexToken(CLOSE,')',1,65)

Parsing (iff (and ('B_100' 'B_101' '$100')) ('[TODAY]' '[4,5,6]' '[3+4]'))
ParsedElement(TYPE: quotedstring, VALUE: 'B_100')
ParsedElement(TYPE: predicate, VALUE: 'B_100')
ParsedElement(TYPE: quotedstring, VALUE: 'B_101')
ParsedElement(TYPE: quotedstring, VALUE: '$100')
ParsedElement(TYPE: termseq, VALUE: '$100')
ParsedElement(TYPE: termseq, VALUE: 'B_101' '$100')
ParsedElement(TYPE: atomsent, VALUE: ('B_100' 'B_101' '$100'))
ParsedElement(TYPE: sentence, VALUE: ('B_100' 'B_101' '$100'))
ParsedElement(TYPE: sentence, VALUE: ('B_100' 'B_101' '$100'))
ParsedElement(TYPE: boolsent, VALUE: (AND ('B_100' 'B_101' '$100')))
ParsedElement(TYPE: sentence, VALUE: (AND ('B_100' 'B_101' '$100')))
ParsedElement(TYPE: quotedstring, VALUE: '[TODAY]')
ParsedElement(TYPE: predicate, VALUE: '[TODAY]')
ParsedElement(TYPE: quotedstring, VALUE: '[4,5,6]')
ParsedElement(TYPE: quotedstring, VALUE: '[3+4]')
ParsedElement(TYPE: termseq, VALUE: '[3+4]')
ParsedElement(TYPE: termseq, VALUE: '[4,5,6]' '[3+4]')
ParsedElement(TYPE: atomsent, VALUE: ('[TODAY]' '[4,5,6]' '[3+4]'))
ParsedElement(TYPE: sentence, VALUE: ('[TODAY]' '[4,5,6]' '[3+4]'))
ParsedElement(TYPE: boolsent, VALUE: (iff (AND ('B_100' 'B_101' '$100')) ('[TODAY]' '[4,5,6]' '[3+4]')))
ParsedElement(TYPE: sentence, VALUE: (iff (AND ('B_100' 'B_101' '$100')) ('[TODAY]' '[4,5,6]' '[3+4]')))


5 sentences
atomic: ('FuncA' 'a' 100 25): ops=0, names=2
Boolean: (and ('B' 'C') (or ('C' 'D')) (or ('FuncB') ('Func' 100 'A') ('something'))): ops=3, names=7
atomic: ('cl:comment' 'B100%'): ops=0, names=2
atomic: ('A1:"A_comment_inside"' 'COMMENT:B100%'): ops=0, names=2
Boolean: (iff (and ('B_100' 'B_101' '$100')) ('[TODAY]' '[4,5,6]' '[3+4]')): ops=2, names=6

=== Lexing and parsing a3-valid-clif2.txt ===

Lexing (or (not ('TODAY=03/26/22')) (not ('TODAY=03/26/22')) (and ('FRIDAY' 13)))
LexToken(OPEN,'(',1,0)
LexToken(OR,'or',1,1)
LexToken(OPEN,'(',1,4)
LexToken(NOT,'not',1,5)
LexToken(OPEN,'(',1,9)
LexToken(QUOTEDSTRING,"'TODAY=03/26/22'",1,10)
LexToken(CLOSE,')',1,26)
LexToken(CLOSE,')',1,27)
LexToken(OPEN,'(',1,29)
LexToken(NOT,'not',1,30)
LexToken(OPEN,'(',1,34)
LexToken(QUOTEDSTRING,"'TODAY=03/26/22'",1,35)
LexToken(CLOSE,')',1,51)
LexToken(CLOSE,')',1,52)
LexToken(OPEN,'(',1,54)
LexToken(AND,'and',1,55)
LexToken(OPEN,'(',1,59)
LexToken(QUOTEDSTRING,"'FRIDAY'",1,60)
LexToken(NUMERAL,'13',1,69)
LexToken(CLOSE,')',1,71)
LexToken(CLOSE,')',1,72)
LexToken(CLOSE,')',1,73)

Parsing (or (not ('TODAY=03/26/22')) (not ('TODAY=03/26/22')) (and ('FRIDAY' 13)))
ParsedElement(TYPE: quotedstring, VALUE: 'TODAY=03/26/22')
ParsedElement(TYPE: predicate, VALUE: 'TODAY=03/26/22')
ParsedElement(TYPE: termseq, VALUE: None)
ParsedElement(TYPE: atomsent, VALUE: ('TODAY=03/26/22'))
ParsedElement(TYPE: sentence, VALUE: ('TODAY=03/26/22'))
ParsedElement(TYPE: boolsent, VALUE: {}).format(p[0])
ParsedElement(TYPE: sentence, VALUE: (NOT ('TODAY=03/26/22')))
ParsedElement(TYPE: quotedstring, VALUE: 'TODAY=03/26/22')
ParsedElement(TYPE: predicate, VALUE: 'TODAY=03/26/22')
ParsedElement(TYPE: termseq, VALUE: None)
ParsedElement(TYPE: atomsent, VALUE: ('TODAY=03/26/22'))
ParsedElement(TYPE: sentence, VALUE: ('TODAY=03/26/22'))
ParsedElement(TYPE: boolsent, VALUE: {}).format(p[0])
ParsedElement(TYPE: sentence, VALUE: (NOT ('TODAY=03/26/22')))
ParsedElement(TYPE: quotedstring, VALUE: 'FRIDAY')
ParsedElement(TYPE: predicate, VALUE: 'FRIDAY')
ParsedElement(TYPE: numeral, VALUE: 13)
ParsedElement(TYPE: termseq, VALUE: 13)
ParsedElement(TYPE: atomsent, VALUE: ('FRIDAY' 13))
ParsedElement(TYPE: sentence, VALUE: ('FRIDAY' 13))
ParsedElement(TYPE: sentence, VALUE: ('FRIDAY' 13))
ParsedElement(TYPE: boolsent, VALUE: (AND ('FRIDAY' 13)))
ParsedElement(TYPE: sentence, VALUE: (AND ('FRIDAY' 13)))
ParsedElement(TYPE: sentence, VALUE: (AND ('FRIDAY' 13)))
ParsedElement(TYPE: sentence, VALUE: (NOT ('TODAY=03/26/22')) (AND ('FRIDAY' 13)))
ParsedElement(TYPE: sentence, VALUE: (NOT ('TODAY=03/26/22')) (NOT ('TODAY=03/26/22')) (AND ('FRIDAY' 13)))
ParsedElement(TYPE: boolsent, VALUE: (OR (NOT ('TODAY=03/26/22')) (NOT ('TODAY=03/26/22')) (AND ('FRIDAY' 13))))
ParsedElement(TYPE: sentence, VALUE: (OR (NOT ('TODAY=03/26/22')) (NOT ('TODAY=03/26/22')) (AND ('FRIDAY' 13))))

Lexing (and (0))
LexToken(OPEN,'(',1,0)
LexToken(AND,'and',1,1)
LexToken(OPEN,'(',1,5)
LexToken(NUMERAL,'0',1,6)
LexToken(CLOSE,')',1,7)
LexToken(CLOSE,')',1,8)

Parsing (and (0))
ParsedElement(TYPE: numeral, VALUE: 0)
ParsedElement(TYPE: predicate, VALUE: 0)
ParsedElement(TYPE: termseq, VALUE: None)
ParsedElement(TYPE: atomsent, VALUE: (0))
ParsedElement(TYPE: sentence, VALUE: (0))
ParsedElement(TYPE: sentence, VALUE: (0))
ParsedElement(TYPE: boolsent, VALUE: (AND (0)))
ParsedElement(TYPE: sentence, VALUE: (AND (0)))

Lexing (and (0 1 2 3 4 'more;'))
LexToken(OPEN,'(',1,0)
LexToken(AND,'and',1,1)
LexToken(OPEN,'(',1,5)
LexToken(NUMERAL,'0',1,6)
LexToken(NUMERAL,'1',1,8)
LexToken(NUMERAL,'2',1,10)
LexToken(NUMERAL,'3',1,12)
LexToken(NUMERAL,'4',1,14)
LexToken(QUOTEDSTRING,"'more;'",1,16)
LexToken(CLOSE,')',1,23)
LexToken(CLOSE,')',1,24)

Parsing (and (0 1 2 3 4 'more;'))
ParsedElement(TYPE: numeral, VALUE: 0)
ParsedElement(TYPE: predicate, VALUE: 0)
ParsedElement(TYPE: numeral, VALUE: 1)
ParsedElement(TYPE: numeral, VALUE: 2)
ParsedElement(TYPE: numeral, VALUE: 3)
ParsedElement(TYPE: numeral, VALUE: 4)
ParsedElement(TYPE: quotedstring, VALUE: 'more;')
ParsedElement(TYPE: termseq, VALUE: 'more;')
ParsedElement(TYPE: termseq, VALUE: 4 'more;')
ParsedElement(TYPE: termseq, VALUE: 3 4 'more;')
ParsedElement(TYPE: termseq, VALUE: 2 3 4 'more;')
ParsedElement(TYPE: termseq, VALUE: 1 2 3 4 'more;')
ParsedElement(TYPE: atomsent, VALUE: (0 1 2 3 4 'more;'))
ParsedElement(TYPE: sentence, VALUE: (0 1 2 3 4 'more;'))
ParsedElement(TYPE: sentence, VALUE: (0 1 2 3 4 'more;'))
ParsedElement(TYPE: boolsent, VALUE: (AND (0 1 2 3 4 'more;')))
ParsedElement(TYPE: sentence, VALUE: (AND (0 1 2 3 4 'more;')))

Lexing (if (not ('True')) (and (0 '=' 1) (0 '=' 2) (not ('FalseStatement3'))))
LexToken(OPEN,'(',1,0)
LexToken(IF,'if',1,1)
LexToken(OPEN,'(',1,4)
LexToken(NOT,'not',1,5)
LexToken(OPEN,'(',1,9)
LexToken(QUOTEDSTRING,"'True'",1,10)
LexToken(CLOSE,')',1,16)
LexToken(CLOSE,')',1,17)
LexToken(OPEN,'(',1,19)
LexToken(AND,'and',1,20)
LexToken(OPEN,'(',1,24)
LexToken(NUMERAL,'0',1,25)
LexToken(QUOTEDSTRING,"'='",1,27)
LexToken(NUMERAL,'1',1,31)
LexToken(CLOSE,')',1,32)
LexToken(OPEN,'(',1,34)
LexToken(NUMERAL,'0',1,35)
LexToken(QUOTEDSTRING,"'='",1,37)
LexToken(NUMERAL,'2',1,41)
LexToken(CLOSE,')',1,42)
LexToken(OPEN,'(',1,44)
LexToken(NOT,'not',1,45)
LexToken(OPEN,'(',1,49)
LexToken(QUOTEDSTRING,"'FalseStatement3'",1,50)
LexToken(CLOSE,')',1,67)
LexToken(CLOSE,')',1,68)
LexToken(CLOSE,')',1,69)
LexToken(CLOSE,')',1,70)

Parsing (if (not ('True')) (and (0 '=' 1) (0 '=' 2) (not ('FalseStatement3'))))
ParsedElement(TYPE: quotedstring, VALUE: 'True')
ParsedElement(TYPE: predicate, VALUE: 'True')
ParsedElement(TYPE: termseq, VALUE: None)
ParsedElement(TYPE: atomsent, VALUE: ('True'))
ParsedElement(TYPE: sentence, VALUE: ('True'))
ParsedElement(TYPE: boolsent, VALUE: {}).format(p[0])
ParsedElement(TYPE: sentence, VALUE: (NOT ('True')))
ParsedElement(TYPE: numeral, VALUE: 0)
ParsedElement(TYPE: predicate, VALUE: 0)
ParsedElement(TYPE: quotedstring, VALUE: '=')
ParsedElement(TYPE: numeral, VALUE: 1)
ParsedElement(TYPE: termseq, VALUE: 1)
ParsedElement(TYPE: termseq, VALUE: '=' 1)
ParsedElement(TYPE: atomsent, VALUE: (0 '=' 1))
ParsedElement(TYPE: sentence, VALUE: (0 '=' 1))
ParsedElement(TYPE: numeral, VALUE: 0)
ParsedElement(TYPE: predicate, VALUE: 0)
ParsedElement(TYPE: quotedstring, VALUE: '=')
ParsedElement(TYPE: numeral, VALUE: 2)
ParsedElement(TYPE: termseq, VALUE: 2)
ParsedElement(TYPE: termseq, VALUE: '=' 2)
ParsedElement(TYPE: atomsent, VALUE: (0 '=' 2))
ParsedElement(TYPE: sentence, VALUE: (0 '=' 2))
ParsedElement(TYPE: quotedstring, VALUE: 'FalseStatement3')
ParsedElement(TYPE: predicate, VALUE: 'FalseStatement3')
ParsedElement(TYPE: termseq, VALUE: None)
ParsedElement(TYPE: atomsent, VALUE: ('FalseStatement3'))
ParsedElement(TYPE: sentence, VALUE: ('FalseStatement3'))
ParsedElement(TYPE: boolsent, VALUE: {}).format(p[0])
ParsedElement(TYPE: sentence, VALUE: (NOT ('FalseStatement3')))
ParsedElement(TYPE: sentence, VALUE: (NOT ('FalseStatement3')))
ParsedElement(TYPE: sentence, VALUE: (0 '=' 2) (NOT ('FalseStatement3')))
ParsedElement(TYPE: sentence, VALUE: (0 '=' 1) (0 '=' 2) (NOT ('FalseStatement3')))
ParsedElement(TYPE: boolsent, VALUE: (AND (0 '=' 1) (0 '=' 2) (NOT ('FalseStatement3'))))
ParsedElement(TYPE: sentence, VALUE: (AND (0 '=' 1) (0 '=' 2) (NOT ('FalseStatement3'))))
ParsedElement(TYPE: boolsent, VALUE: (if (NOT ('True')) (AND (0 '=' 1) (0 '=' 2) (NOT ('FalseStatement3')))))
ParsedElement(TYPE: sentence, VALUE: (if (NOT ('True')) (AND (0 '=' 1) (0 '=' 2) (NOT ('FalseStatement3')))))

Lexing (and (1000) (1001) ('1001+'))
LexToken(OPEN,'(',1,0)
LexToken(AND,'and',1,1)
LexToken(OPEN,'(',1,5)
LexToken(NUMERAL,'1000',1,6)
LexToken(CLOSE,')',1,10)
LexToken(OPEN,'(',1,12)
LexToken(NUMERAL,'1001',1,13)
LexToken(CLOSE,')',1,17)
LexToken(OPEN,'(',1,19)
LexToken(QUOTEDSTRING,"'1001+'",1,20)
LexToken(CLOSE,')',1,27)
LexToken(CLOSE,')',1,28)

Parsing (and (1000) (1001) ('1001+'))
ParsedElement(TYPE: numeral, VALUE: 1000)
ParsedElement(TYPE: predicate, VALUE: 1000)
ParsedElement(TYPE: termseq, VALUE: None)
ParsedElement(TYPE: atomsent, VALUE: (1000))
ParsedElement(TYPE: sentence, VALUE: (1000))
ParsedElement(TYPE: numeral, VALUE: 1001)
ParsedElement(TYPE: predicate, VALUE: 1001)
ParsedElement(TYPE: termseq, VALUE: None)
ParsedElement(TYPE: atomsent, VALUE: (1001))
ParsedElement(TYPE: sentence, VALUE: (1001))
ParsedElement(TYPE: quotedstring, VALUE: '1001+')
ParsedElement(TYPE: predicate, VALUE: '1001+')
ParsedElement(TYPE: termseq, VALUE: None)
ParsedElement(TYPE: atomsent, VALUE: ('1001+'))
ParsedElement(TYPE: sentence, VALUE: ('1001+'))
ParsedElement(TYPE: sentence, VALUE: ('1001+'))
ParsedElement(TYPE: sentence, VALUE: (1001) ('1001+'))
ParsedElement(TYPE: sentence, VALUE: (1000) (1001) ('1001+'))
ParsedElement(TYPE: boolsent, VALUE: (AND (1000) (1001) ('1001+')))
ParsedElement(TYPE: sentence, VALUE: (AND (1000) (1001) ('1001+')))

Lexing (or (100) ('and' 1000 1001 '1001+'))
LexToken(OPEN,'(',1,0)
LexToken(OR,'or',1,1)
LexToken(OPEN,'(',1,4)
LexToken(NUMERAL,'100',1,5)
LexToken(CLOSE,')',1,8)
LexToken(OPEN,'(',1,10)
LexToken(QUOTEDSTRING,"'and'",1,11)
LexToken(NUMERAL,'1000',1,17)
LexToken(NUMERAL,'1001',1,22)
LexToken(QUOTEDSTRING,"'1001+'",1,27)
LexToken(CLOSE,')',1,34)
LexToken(CLOSE,')',1,35)

Parsing (or (100) ('and' 1000 1001 '1001+'))
ParsedElement(TYPE: numeral, VALUE: 100)
ParsedElement(TYPE: predicate, VALUE: 100)
ParsedElement(TYPE: termseq, VALUE: None)
ParsedElement(TYPE: atomsent, VALUE: (100))
ParsedElement(TYPE: sentence, VALUE: (100))
ParsedElement(TYPE: quotedstring, VALUE: 'and')
ParsedElement(TYPE: predicate, VALUE: 'and')
ParsedElement(TYPE: numeral, VALUE: 1000)
ParsedElement(TYPE: numeral, VALUE: 1001)
ParsedElement(TYPE: quotedstring, VALUE: '1001+')
ParsedElement(TYPE: termseq, VALUE: '1001+')
ParsedElement(TYPE: termseq, VALUE: 1001 '1001+')
ParsedElement(TYPE: termseq, VALUE: 1000 1001 '1001+')
ParsedElement(TYPE: atomsent, VALUE: ('and' 1000 1001 '1001+'))
ParsedElement(TYPE: sentence, VALUE: ('and' 1000 1001 '1001+'))
ParsedElement(TYPE: sentence, VALUE: ('and' 1000 1001 '1001+'))
ParsedElement(TYPE: sentence, VALUE: (100) ('and' 1000 1001 '1001+'))
ParsedElement(TYPE: boolsent, VALUE: (OR (100) ('and' 1000 1001 '1001+')))
ParsedElement(TYPE: sentence, VALUE: (OR (100) ('and' 1000 1001 '1001+')))


6 sentences
Boolean: (or (not ('TODAY=03/26/22')) (not ('TODAY=03/26/22')) (and ('FRIDAY' 13))): ops=4, names=2
Boolean: (and (0)): ops=1, names=0
Boolean: (and (0 1 2 3 4 'more;')): ops=1, names=1
Boolean: (if (not ('True')) (and (0 '=' 1) (0 '=' 2) (not ('FalseStatement3')))): ops=4, names=3
Boolean: (and (1000) (1001) ('1001+')): ops=1, names=1
Boolean: (or (100) ('and' 1000 1001 '1001+')): ops=1, names=2

=== Lexing and parsing a3-invalid-clif1.txt ===

Lexing ('FuncA' 'a' 100 25 'more;and;more' 'and')
LexToken(OPEN,'(',1,0)
LexToken(QUOTEDSTRING,"'FuncA'",1,1)
LexToken(QUOTEDSTRING,"'a'",1,9)
LexToken(NUMERAL,'100',1,13)
LexToken(NUMERAL,'25',1,17)
LexToken(QUOTEDSTRING,"'more;and;more'",1,20)
LexToken(QUOTEDSTRING,"'and'",1,36)
LexToken(CLOSE,')',1,41)

Parsing ('FuncA' 'a' 100 25 'more;and;more' 'and')
ParsedElement(TYPE: quotedstring, VALUE: 'FuncA')
ParsedElement(TYPE: predicate, VALUE: 'FuncA')
ParsedElement(TYPE: quotedstring, VALUE: 'a')
ParsedElement(TYPE: numeral, VALUE: 100)
ParsedElement(TYPE: numeral, VALUE: 25)
ParsedElement(TYPE: quotedstring, VALUE: 'more;and;more')
ParsedElement(TYPE: quotedstring, VALUE: 'and')
ParsedElement(TYPE: termseq, VALUE: 'and')
ParsedElement(TYPE: termseq, VALUE: 'more;and;more' 'and')
ParsedElement(TYPE: termseq, VALUE: 25 'more;and;more' 'and')
ParsedElement(TYPE: termseq, VALUE: 100 25 'more;and;more' 'and')
ParsedElement(TYPE: termseq, VALUE: 'a' 100 25 'more;and;more' 'and')
ParsedElement(TYPE: atomsent, VALUE: ('FuncA' 'a' 100 25 'more;and;more' 'and'))
ParsedElement(TYPE: sentence, VALUE: ('FuncA' 'a' 100 25 'more;and;more' 'and'))

Lexing (and ('isTrue?' 'C'))
LexToken(OPEN,'(',1,0)
LexToken(AND,'and',1,1)
LexToken(OPEN,'(',1,5)
LexToken(QUOTEDSTRING,"'isTrue?'",1,6)
LexToken(QUOTEDSTRING,"'C'",1,16)
LexToken(CLOSE,')',1,19)
LexToken(CLOSE,')',1,20)

Parsing (and ('isTrue?' 'C'))
ParsedElement(TYPE: quotedstring, VALUE: 'isTrue?')
ParsedElement(TYPE: predicate, VALUE: 'isTrue?')
ParsedElement(TYPE: quotedstring, VALUE: 'C')
ParsedElement(TYPE: termseq, VALUE: 'C')
ParsedElement(TYPE: atomsent, VALUE: ('isTrue?' 'C'))
ParsedElement(TYPE: sentence, VALUE: ('isTrue?' 'C'))
ParsedElement(TYPE: sentence, VALUE: ('isTrue?' 'C'))
ParsedElement(TYPE: boolsent, VALUE: (AND ('isTrue?' 'C')))
ParsedElement(TYPE: sentence, VALUE: (AND ('isTrue?' 'C')))

Lexing (if ('CORRECT' 100 '=50+50') (and (and ('CORRECT' 'everything' 0))))
LexToken(OPEN,'(',1,0)
LexToken(IF,'if',1,1)
LexToken(OPEN,'(',1,4)
LexToken(QUOTEDSTRING,"'CORRECT'",1,5)
LexToken(NUMERAL,'100',1,15)
LexToken(QUOTEDSTRING,"'=50+50'",1,19)
LexToken(CLOSE,')',1,27)
LexToken(OPEN,'(',1,29)
LexToken(AND,'and',1,30)
LexToken(OPEN,'(',1,34)
LexToken(AND,'and',1,35)
LexToken(OPEN,'(',1,39)
LexToken(QUOTEDSTRING,"'CORRECT'",1,40)
LexToken(QUOTEDSTRING,"'everything'",1,50)
LexToken(NUMERAL,'0',1,63)
LexToken(CLOSE,')',1,64)
LexToken(CLOSE,')',1,65)
LexToken(CLOSE,')',1,66)
LexToken(CLOSE,')',1,67)

Parsing (if ('CORRECT' 100 '=50+50') (and (and ('CORRECT' 'everything' 0))))
ParsedElement(TYPE: quotedstring, VALUE: 'CORRECT')
ParsedElement(TYPE: predicate, VALUE: 'CORRECT')
ParsedElement(TYPE: numeral, VALUE: 100)
ParsedElement(TYPE: quotedstring, VALUE: '=50+50')
ParsedElement(TYPE: termseq, VALUE: '=50+50')
ParsedElement(TYPE: termseq, VALUE: 100 '=50+50')
ParsedElement(TYPE: atomsent, VALUE: ('CORRECT' 100 '=50+50'))
ParsedElement(TYPE: sentence, VALUE: ('CORRECT' 100 '=50+50'))
ParsedElement(TYPE: quotedstring, VALUE: 'CORRECT')
ParsedElement(TYPE: predicate, VALUE: 'CORRECT')
ParsedElement(TYPE: quotedstring, VALUE: 'everything')
ParsedElement(TYPE: numeral, VALUE: 0)
ParsedElement(TYPE: termseq, VALUE: 0)
ParsedElement(TYPE: termseq, VALUE: 'everything' 0)
ParsedElement(TYPE: atomsent, VALUE: ('CORRECT' 'everything' 0))
ParsedElement(TYPE: sentence, VALUE: ('CORRECT' 'everything' 0))
ParsedElement(TYPE: sentence, VALUE: ('CORRECT' 'everything' 0))
ParsedElement(TYPE: boolsent, VALUE: (AND ('CORRECT' 'everything' 0)))
ParsedElement(TYPE: sentence, VALUE: (AND ('CORRECT' 'everything' 0)))
ParsedElement(TYPE: sentence, VALUE: (AND ('CORRECT' 'everything' 0)))
ParsedElement(TYPE: boolsent, VALUE: (AND (AND ('CORRECT' 'everything' 0))))
ParsedElement(TYPE: sentence, VALUE: (AND (AND ('CORRECT' 'everything' 0))))
ParsedElement(TYPE: boolsent, VALUE: (if ('CORRECT' 100 '=50+50') (AND (AND ('CORRECT' 'everything' 0)))))
ParsedElement(TYPE: sentence, VALUE: (if ('CORRECT' 100 '=50+50') (AND (AND ('CORRECT' 'everything' 0)))))

Lexing (iff (and 'B_100' 'B_101') ('{order1}' '[1234]') ('MORE' '1001&Stuff'))
LexToken(OPEN,'(',1,0)
LexToken(IFF,'iff',1,1)
LexToken(OPEN,'(',1,5)
LexToken(AND,'and',1,6)
LexToken(QUOTEDSTRING,"'B_100'",1,10)
LexToken(QUOTEDSTRING,"'B_101'",1,18)
LexToken(CLOSE,')',1,25)
LexToken(OPEN,'(',1,27)
LexToken(QUOTEDSTRING,"'{order1}'",1,28)
LexToken(QUOTEDSTRING,"'[1234]'",1,39)
LexToken(CLOSE,')',1,47)
LexToken(OPEN,'(',1,49)
LexToken(QUOTEDSTRING,"'MORE'",1,50)
LexToken(QUOTEDSTRING,"'1001&Stuff'",1,57)
LexToken(CLOSE,')',1,69)
LexToken(CLOSE,')',1,70)

Parsing (iff (and 'B_100' 'B_101') ('{order1}' '[1234]') ('MORE' '1001&Stuff'))
Parsing error; current stack: [LexToken(OPEN,'(',1,0), LexToken(IFF,'iff',1,1), LexToken(OPEN,'(',1,5), LexToken(AND,'and',1,6)]
ParsedElement(TYPE: quotedstring, VALUE: '{order1}')
ParsedElement(TYPE: predicate, VALUE: '{order1}')
ParsedElement(TYPE: quotedstring, VALUE: '[1234]')
ParsedElement(TYPE: termseq, VALUE: '[1234]')
ParsedElement(TYPE: atomsent, VALUE: ('{order1}' '[1234]'))
ParsedElement(TYPE: sentence, VALUE: ('{order1}' '[1234]'))
ParsedElement(TYPE: quotedstring, VALUE: 'MORE')
ParsedElement(TYPE: predicate, VALUE: 'MORE')
ParsedElement(TYPE: quotedstring, VALUE: '1001&Stuff')
ParsedElement(TYPE: termseq, VALUE: '1001&Stuff')
ParsedElement(TYPE: atomsent, VALUE: ('MORE' '1001&Stuff'))
ParsedElement(TYPE: sentence, VALUE: ('MORE' '1001&Stuff'))
Parsing error; current stack: [sentence, sentence]


3 sentences
atomic: ('FuncA' 'a' 100 25 'more;and;more' 'and'): ops=0, names=4
Boolean: (and ('isTrue?' 'C')): ops=1, names=2
Boolean: (if ('CORRECT' 100 '=50+50') (and (and ('CORRECT' 'everything' 0)))): ops=3, names=3

=== Lexing and parsing a3-invalid-clif2.txt ===

Lexing (not ('TODAY=03/26/22'))
LexToken(OPEN,'(',1,0)
LexToken(NOT,'not',1,1)
LexToken(OPEN,'(',1,5)
LexToken(QUOTEDSTRING,"'TODAY=03/26/22'",1,6)
LexToken(CLOSE,')',1,22)
LexToken(CLOSE,')',1,23)

Parsing (not ('TODAY=03/26/22'))
ParsedElement(TYPE: quotedstring, VALUE: 'TODAY=03/26/22')
ParsedElement(TYPE: predicate, VALUE: 'TODAY=03/26/22')
ParsedElement(TYPE: termseq, VALUE: None)
ParsedElement(TYPE: atomsent, VALUE: ('TODAY=03/26/22'))
ParsedElement(TYPE: sentence, VALUE: ('TODAY=03/26/22'))
ParsedElement(TYPE: boolsent, VALUE: {}).format(p[0])
ParsedElement(TYPE: sentence, VALUE: (NOT ('TODAY=03/26/22')))

Lexing (and ('isTrue?' 'C'))
LexToken(OPEN,'(',1,0)
LexToken(AND,'and',1,1)
LexToken(OPEN,'(',1,5)
LexToken(QUOTEDSTRING,"'isTrue?'",1,6)
LexToken(QUOTEDSTRING,"'C'",1,16)
LexToken(CLOSE,')',1,19)
LexToken(CLOSE,')',1,20)

Parsing (and ('isTrue?' 'C'))
ParsedElement(TYPE: quotedstring, VALUE: 'isTrue?')
ParsedElement(TYPE: predicate, VALUE: 'isTrue?')
ParsedElement(TYPE: quotedstring, VALUE: 'C')
ParsedElement(TYPE: termseq, VALUE: 'C')
ParsedElement(TYPE: atomsent, VALUE: ('isTrue?' 'C'))
ParsedElement(TYPE: sentence, VALUE: ('isTrue?' 'C'))
ParsedElement(TYPE: sentence, VALUE: ('isTrue?' 'C'))
ParsedElement(TYPE: boolsent, VALUE: (AND ('isTrue?' 'C')))
ParsedElement(TYPE: sentence, VALUE: (AND ('isTrue?' 'C')))

Lexing (and (not 'True') ('FuncA' or 'Func B'))
LexToken(OPEN,'(',1,0)
LexToken(AND,'and',1,1)
LexToken(OPEN,'(',1,5)
LexToken(NOT,'not',1,6)
LexToken(QUOTEDSTRING,"'True'",1,10)
LexToken(CLOSE,')',1,16)
LexToken(OPEN,'(',1,18)
LexToken(QUOTEDSTRING,"'FuncA'",1,19)
LexToken(OR,'or',1,27)
LexToken(QUOTEDSTRING,"'Func B'",1,30)
LexToken(CLOSE,')',1,38)
LexToken(CLOSE,')',1,39)

Parsing (and (not 'True') ('FuncA' or 'Func B'))
Parsing error; current stack: [LexToken(OPEN,'(',1,0), LexToken(AND,'and',1,1), LexToken(OPEN,'(',1,5), LexToken(NOT,'not',1,6)]

Lexing (cl:comment 'My comment is \'THIS\'' (and ('TODAY')))
LexToken(OPEN,'(',1,0)
LexToken(COMMENT,'cl:comment',1,1)
LexToken(QUOTEDSTRING,"'My comment is \\'",1,12)
LexToken(CHAR,'\\',1,33)
LexToken(QUOTEDSTRING,"''",1,34)
LexToken(OPEN,'(',1,37)
LexToken(AND,'and',1,38)
LexToken(OPEN,'(',1,42)
LexToken(QUOTEDSTRING,"'TODAY'",1,43)
LexToken(CLOSE,')',1,50)
LexToken(CLOSE,')',1,51)
LexToken(CLOSE,')',1,52)

Parsing (cl:comment 'My comment is \'THIS\'' (and ('TODAY')))
Parsing error; current stack: [LexToken(OPEN,'(',1,0)]
ParsedElement(TYPE: quotedstring, VALUE: 'TODAY')
ParsedElement(TYPE: predicate, VALUE: 'TODAY')
ParsedElement(TYPE: termseq, VALUE: None)
ParsedElement(TYPE: atomsent, VALUE: ('TODAY'))
ParsedElement(TYPE: sentence, VALUE: ('TODAY'))
ParsedElement(TYPE: sentence, VALUE: ('TODAY'))
ParsedElement(TYPE: boolsent, VALUE: (AND ('TODAY')))
ParsedElement(TYPE: sentence, VALUE: (AND ('TODAY')))
Parsing error; current stack: [sentence]


2 sentences
Boolean: (not ('TODAY=03/26/22')): ops=1, names=1
Boolean: (and ('isTrue?' 'C')): ops=1, names=2
